// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  successRate  Float    @default(0) // BaÅŸarÄ± yÃ¼zdesi (0-100 arasÄ±)
  gamesWon     Int      @default(0)
  gamesPlayed  Int      @default(0)

  player1Games Game[] @relation("Player1")
  player2Games Game[] @relation("Player2")
}


model Game {
  id              Int      @id @default(autoincrement())
  duration        Int
  status          String   @default("waiting")
  player1Id       Int
  player2Id       Int?      // ikinci oyuncu opsiyonel
  player1Score     Int     @default(0)
  player2Score     Int     @default(0)
  currentTurnId   Int?      // SÄ±ra kimde?
  boardState      Json?     // Oyun tahtasÄ± durumu
  letterPool      Json?     // ðŸŸ¡ Kalan havuz
  player1Letters  Json?     // ðŸŸ¢ Oyuncu 1 harfleri
  player2Letters  Json?     // ðŸ”µ Oyuncu 2 harfleri
  mines           Json?    // ðŸ§¨ MayÄ±n ve Ã–dÃ¼ller
  player1Rewards     Json?     // ðŸŸ¢ Bu iki alan eksikse ekle!
  player2Rewards     Json?

  blockZone         String?      // 'left' | 'right' | null
  frozenLettersOpponent String[]     // Rakibin donacak harf sayÄ±sÄ± (Ã¶rneÄŸin 2)
  extraTurnUserId   Int?         // Ekstra hamle hakkÄ± olan oyuncunun ID'si

  createdAt       DateTime @default(now())

  lastMoveTime    DateTime? @default(now())
  winnerId        Int?
  endedAt         DateTime?
 
  player1         User     @relation("Player1", fields: [player1Id], references: [id])
  player2         User?    @relation("Player2", fields: [player2Id], references: [id])
}

